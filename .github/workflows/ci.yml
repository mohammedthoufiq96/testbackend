name: CI/CD Pipeline with Test Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run Jest Tests and Save Output
        run: npm run test -- --json --outputFile=test-output.json

      - name: Print Jest Output (Debug)
        run: cat test-output.json

      - name: Upload Jest Test Output
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test-output.json

  ai-analysis:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Download Jest Test Output
        uses: actions/download-artifact@v4
        with:
          name: test-output

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare and Send Test Results to AI
        run: |
          echo "Reading test output..."
          TEST_OUTPUT=$(cat test-output.json)

          PROMPT="Analyze the following Jest test results and provide:
          - Summary of pass/fail
          - Possible reasons for failure
          - Suggestions to fix
          - Code improvement tips

          Test Results:
          $TEST_OUTPUT"

          jq -n --arg model "llama3.2:latest" \
                --arg prompt "$PROMPT" \
                --argjson stream false \
                '{model: $model, prompt: $prompt, stream: $stream}' > prompt.json

          echo "Sending prompt to AI endpoint..."
          curl -v -X POST https://604b-14-99-175-222.ngrok-free.app/api/ainanalyze/ \
            -H "Content-Type: application/json" \
            -d @prompt.json > ai-analysis-result.json

      - name: Print AI Analysis Result (Debug)
        run: cat ai-analysis-result.json

      - name: Upload AI Analysis Result
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-result
          path: ai-analysis-result.json

  notify:
            needs: [test, ai-analysis]
            runs-on: ubuntu-latest
            if: always()
        
            steps:
              - name: Download AI Analysis Result
                uses: actions/download-artifact@v4
                with:
                  name: ai-analysis-result
        
              - name: Read AI Analysis
                id: analysis
                run: |
                  echo "Reading AI analysis..."
                  analysis=$(cat ai-analysis-result.json)
                  analysis="${analysis//'%'/'%25'}"
                  analysis="${analysis//$'\n'/'%0A'}"
                  analysis="${analysis//$'\r'/'%0D'}"
                  echo "analysis_output=$analysis" >> "$GITHUB_OUTPUT"
        
              - name: Send Slack Notification
                env:
                  ANALYSIS_RESULT: ${{ steps.analysis.outputs.analysis_output }}
                run: |
                  STATUS="âœ… All tests passed!"
                  if [ "${{ needs.test.result }}" == "failure" ]; then
                    STATUS="ðŸš¨ Some tests failed!"
                  fi
        
                  # Truncate analysis if too long
                  TRUNCATED_ANALYSIS=$(echo "$ANALYSIS_RESULT" | head -c 2800)
        
                  # Escape newlines and quotes for JSON
                  ESCAPED_ANALYSIS=$(echo "$TRUNCATED_ANALYSIS" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
        
                  # Create Slack message payload
                  PAYLOAD=$(jq -n --arg text "$STATUS\n\nAI Code Suggestions:\n$ESCAPED_ANALYSIS" '{text: $text}')
        
                  # Send to Slack
                    curl -v -X POST https://604b-14-99-175-222.ngrok-free.app/api/sendnotfication/ \
                       --header 'Content-type: application/json' \
                       --data "$PAYLOAD"
